// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  id                   String  @id @default(cuid()) @map("_id")
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String          @id @default(cuid()) @map("_id")
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  links               Link[]
  pagePath            String     @unique @default(cuid())
  linkPageTitle       String? // @todo edit settings page zod schema
  linkPageDescription String?
  linkPageDesign      PageDesign @default(BLACKWHITE)
  settings            Json       @default("{}")

  @@index([pagePath, email])
}

model Link {
  id  String @id @default(cuid()) @map("_id")
  url String

  label String
  type  LinkType @default(CUSTOM)
  order Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @map("_userId")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum LinkType {
  youtube
  twitter
  instagram
  facebook
  linkedin
  github
  pinterest
  snapchat
  tiktok
  twitch
  CUSTOM
}

enum PageDesign {
  BLACKWHITE
  WHITEBLACK
  COLORFUL
}
